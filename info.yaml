--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID
  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - top.v
    - pwm.v
    - debouncer.v
    - synchronizer.v
  top_module:  "migcorre-pwm"      # put the name of your top module here, make it unique by prepending your github username

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Marcelo Pouso / Miguel Correia"      # Your name
  discord:      "not"      # Your discord handle
  title:        "Duty Controler"      # Project title
  description:  "Increase/Decrease a duty cycle of square signal"      # Short description of what your project does
  how_it_works: "Enter a square clock of 100Khz, and change Its duty cycle by pressing increase or decrease bottom. the change will be in steps of 10%. We have in mind the problem of bouncing bottom, and this was implemented for incremental and decremental bottom.  "      # Longer description of how the project works
  how_to_test:  "You need connect a signal clock of 100Khz in the io_in[5] port, a incremental signal in io_in[6], and the decremental signal in io_in[7]. The output signal will be in the io_out[1] port. the signal output will have a frecuency of 10Khz (10 times lesser than input clock). when you press the incremental input bottom then the signal will increment by 10% Its duty cycle, and when you press the decremental input bottom you will see that the output signal decrement by 10%"      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "You are gonna need a 100Khz clock signal generator, and 2 bottoms for incremental, decremental inputs. and a way of see the output signal, oscilloscope will be ideal "      # Describe any external hardware needed
  language:     "verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     100000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - clock: Clock input of 100Khz. 
    - reset: Reset active high.
    - increase: Increase signal. this will increase the final duty cycle of the output signal by 10%
    - decrease: Decrease signal. this will decrease the final duty cycle of the output signal by 10%
    - disable_debouncer: Disable debouncer fot the increase / decrease inputs.
    - none
    - none
    - none
  outputs:
    - pwm: PWM output signal of 10Khz. with Its duty change.         # a description of what the outputs do
    - pwm_neg: PWM negate output signal
    - none
    - none
    - none
    - none
    - none
    - none

